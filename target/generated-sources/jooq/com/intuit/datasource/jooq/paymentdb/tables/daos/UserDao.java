/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.paymentdb.tables.daos;


import com.intuit.datasource.jooq.paymentdb.tables.User;
import com.intuit.datasource.jooq.paymentdb.tables.records.UserRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, com.intuit.datasource.jooq.paymentdb.tables.pojos.User, UInteger> {

	/**
	 * Create a new UserDao without any configuration
	 */
	public UserDao() {
		super(User.USER, com.intuit.datasource.jooq.paymentdb.tables.pojos.User.class);
	}

	/**
	 * Create a new UserDao with an attached configuration
	 */
	public UserDao(Configuration configuration) {
		super(User.USER, com.intuit.datasource.jooq.paymentdb.tables.pojos.User.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected UInteger getId(com.intuit.datasource.jooq.paymentdb.tables.pojos.User object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<com.intuit.datasource.jooq.paymentdb.tables.pojos.User> fetchById(UInteger... values) {
		return fetch(User.USER.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public com.intuit.datasource.jooq.paymentdb.tables.pojos.User fetchOneById(UInteger value) {
		return fetchOne(User.USER.ID, value);
	}

	/**
	 * Fetch records that have <code>value IN (values)</code>
	 */
	public List<com.intuit.datasource.jooq.paymentdb.tables.pojos.User> fetchByValue(String... values) {
		return fetch(User.USER.VALUE, values);
	}

	/**
	 * Fetch a unique record that has <code>value = value</code>
	 */
	public com.intuit.datasource.jooq.paymentdb.tables.pojos.User fetchOneByValue(String value) {
		return fetchOne(User.USER.VALUE, value);
	}
}

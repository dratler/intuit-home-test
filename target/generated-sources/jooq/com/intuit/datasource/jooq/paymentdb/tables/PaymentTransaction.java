/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.paymentdb.tables;


import com.intuit.datasource.jooq.paymentdb.Keys;
import com.intuit.datasource.jooq.paymentdb.Paymentdb;
import com.intuit.datasource.jooq.paymentdb.tables.records.PaymentTransactionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentTransaction extends TableImpl<PaymentTransactionRecord> {

	private static final long serialVersionUID = 1989525264;

	/**
	 * The reference instance of <code>paymentdb.payment_transaction</code>
	 */
	public static final PaymentTransaction PAYMENT_TRANSACTION = new PaymentTransaction();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PaymentTransactionRecord> getRecordType() {
		return PaymentTransactionRecord.class;
	}

	/**
	 * The column <code>paymentdb.payment_transaction.id</code>.
	 */
	public final TableField<PaymentTransactionRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.amount</code>.
	 */
	public final TableField<PaymentTransactionRecord, Double> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.c_id</code>.
	 */
	public final TableField<PaymentTransactionRecord, UInteger> C_ID = createField("c_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.u_id</code>.
	 */
	public final TableField<PaymentTransactionRecord, UInteger> U_ID = createField("u_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.p_id</code>.
	 */
	public final TableField<PaymentTransactionRecord, UInteger> P_ID = createField("p_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.p_m_id</code>.
	 */
	public final TableField<PaymentTransactionRecord, UInteger> P_M_ID = createField("p_m_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

	/**
	 * The column <code>paymentdb.payment_transaction.is_transaction_approved</code>.
	 */
	public final TableField<PaymentTransactionRecord, Byte> IS_TRANSACTION_APPROVED = createField("is_transaction_approved", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

	/**
	 * Create a <code>paymentdb.payment_transaction</code> table reference
	 */
	public PaymentTransaction() {
		this("payment_transaction", null);
	}

	/**
	 * Create an aliased <code>paymentdb.payment_transaction</code> table reference
	 */
	public PaymentTransaction(String alias) {
		this(alias, PAYMENT_TRANSACTION);
	}

	private PaymentTransaction(String alias, Table<PaymentTransactionRecord> aliased) {
		this(alias, aliased, null);
	}

	private PaymentTransaction(String alias, Table<PaymentTransactionRecord> aliased, Field<?>[] parameters) {
		super(alias, Paymentdb.PAYMENTDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PaymentTransactionRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_PAYMENT_TRANSACTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PaymentTransactionRecord> getPrimaryKey() {
		return Keys.KEY_PAYMENT_TRANSACTION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PaymentTransactionRecord>> getKeys() {
		return Arrays.<UniqueKey<PaymentTransactionRecord>>asList(Keys.KEY_PAYMENT_TRANSACTION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PaymentTransactionRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PaymentTransactionRecord, ?>>asList(Keys.PAYMENT_TRANSACTION_IBFK_1, Keys.PAYMENT_TRANSACTION_IBFK_2, Keys.PAYMENT_TRANSACTION_IBFK_3, Keys.PAYMENT_TRANSACTION_IBFK_4);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PaymentTransaction as(String alias) {
		return new PaymentTransaction(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PaymentTransaction rename(String name) {
		return new PaymentTransaction(name, null);
	}
}

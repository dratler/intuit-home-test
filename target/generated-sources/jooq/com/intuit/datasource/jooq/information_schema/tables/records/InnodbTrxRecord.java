/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.information_schema.tables.records;


import com.intuit.datasource.jooq.information_schema.tables.InnodbTrx;
import com.intuit.datasource.jooq.information_schema.tables.interfaces.IInnodbTrx;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTrxRecord extends TableRecordImpl<InnodbTrxRecord> implements IInnodbTrx {

	private static final long serialVersionUID = -603503200;

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_id</code>.
	 */
	@Override
	public void setTrxId(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_id</code>.
	 */
	@Override
	public String getTrxId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_state</code>.
	 */
	@Override
	public void setTrxState(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_state</code>.
	 */
	@Override
	public String getTrxState() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_started</code>.
	 */
	@Override
	public void setTrxStarted(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_started</code>.
	 */
	@Override
	public Timestamp getTrxStarted() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
	 */
	@Override
	public void setTrxRequestedLockId(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
	 */
	@Override
	public String getTrxRequestedLockId() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_wait_started</code>.
	 */
	@Override
	public void setTrxWaitStarted(Timestamp value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_wait_started</code>.
	 */
	@Override
	public Timestamp getTrxWaitStarted() {
		return (Timestamp) getValue(4);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_weight</code>.
	 */
	@Override
	public void setTrxWeight(ULong value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_weight</code>.
	 */
	@Override
	public ULong getTrxWeight() {
		return (ULong) getValue(5);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
	 */
	@Override
	public void setTrxMysqlThreadId(ULong value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
	 */
	@Override
	public ULong getTrxMysqlThreadId() {
		return (ULong) getValue(6);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_query</code>.
	 */
	@Override
	public void setTrxQuery(String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_query</code>.
	 */
	@Override
	public String getTrxQuery() {
		return (String) getValue(7);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_operation_state</code>.
	 */
	@Override
	public void setTrxOperationState(String value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_operation_state</code>.
	 */
	@Override
	public String getTrxOperationState() {
		return (String) getValue(8);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
	 */
	@Override
	public void setTrxTablesInUse(ULong value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
	 */
	@Override
	public ULong getTrxTablesInUse() {
		return (ULong) getValue(9);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
	 */
	@Override
	public void setTrxTablesLocked(ULong value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
	 */
	@Override
	public ULong getTrxTablesLocked() {
		return (ULong) getValue(10);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
	 */
	@Override
	public void setTrxLockStructs(ULong value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
	 */
	@Override
	public ULong getTrxLockStructs() {
		return (ULong) getValue(11);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
	 */
	@Override
	public void setTrxLockMemoryBytes(ULong value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
	 */
	@Override
	public ULong getTrxLockMemoryBytes() {
		return (ULong) getValue(12);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
	 */
	@Override
	public void setTrxRowsLocked(ULong value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
	 */
	@Override
	public ULong getTrxRowsLocked() {
		return (ULong) getValue(13);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
	 */
	@Override
	public void setTrxRowsModified(ULong value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
	 */
	@Override
	public ULong getTrxRowsModified() {
		return (ULong) getValue(14);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
	 */
	@Override
	public void setTrxConcurrencyTickets(ULong value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
	 */
	@Override
	public ULong getTrxConcurrencyTickets() {
		return (ULong) getValue(15);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
	 */
	@Override
	public void setTrxIsolationLevel(String value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
	 */
	@Override
	public String getTrxIsolationLevel() {
		return (String) getValue(16);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
	 */
	@Override
	public void setTrxUniqueChecks(Integer value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
	 */
	@Override
	public Integer getTrxUniqueChecks() {
		return (Integer) getValue(17);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
	 */
	@Override
	public void setTrxForeignKeyChecks(Integer value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
	 */
	@Override
	public Integer getTrxForeignKeyChecks() {
		return (Integer) getValue(18);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
	 */
	@Override
	public void setTrxLastForeignKeyError(String value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
	 */
	@Override
	public String getTrxLastForeignKeyError() {
		return (String) getValue(19);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
	 */
	@Override
	public void setTrxAdaptiveHashLatched(Integer value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
	 */
	@Override
	public Integer getTrxAdaptiveHashLatched() {
		return (Integer) getValue(20);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
	 */
	@Override
	public void setTrxAdaptiveHashTimeout(ULong value) {
		setValue(21, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
	 */
	@Override
	public ULong getTrxAdaptiveHashTimeout() {
		return (ULong) getValue(21);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
	 */
	@Override
	public void setTrxIsReadOnly(Integer value) {
		setValue(22, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
	 */
	@Override
	public Integer getTrxIsReadOnly() {
		return (Integer) getValue(22);
	}

	/**
	 * Setter for <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
	 */
	@Override
	public void setTrxAutocommitNonLocking(Integer value) {
		setValue(23, value);
	}

	/**
	 * Getter for <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
	 */
	@Override
	public Integer getTrxAutocommitNonLocking() {
		return (Integer) getValue(23);
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IInnodbTrx from) {
		setTrxId(from.getTrxId());
		setTrxState(from.getTrxState());
		setTrxStarted(from.getTrxStarted());
		setTrxRequestedLockId(from.getTrxRequestedLockId());
		setTrxWaitStarted(from.getTrxWaitStarted());
		setTrxWeight(from.getTrxWeight());
		setTrxMysqlThreadId(from.getTrxMysqlThreadId());
		setTrxQuery(from.getTrxQuery());
		setTrxOperationState(from.getTrxOperationState());
		setTrxTablesInUse(from.getTrxTablesInUse());
		setTrxTablesLocked(from.getTrxTablesLocked());
		setTrxLockStructs(from.getTrxLockStructs());
		setTrxLockMemoryBytes(from.getTrxLockMemoryBytes());
		setTrxRowsLocked(from.getTrxRowsLocked());
		setTrxRowsModified(from.getTrxRowsModified());
		setTrxConcurrencyTickets(from.getTrxConcurrencyTickets());
		setTrxIsolationLevel(from.getTrxIsolationLevel());
		setTrxUniqueChecks(from.getTrxUniqueChecks());
		setTrxForeignKeyChecks(from.getTrxForeignKeyChecks());
		setTrxLastForeignKeyError(from.getTrxLastForeignKeyError());
		setTrxAdaptiveHashLatched(from.getTrxAdaptiveHashLatched());
		setTrxAdaptiveHashTimeout(from.getTrxAdaptiveHashTimeout());
		setTrxIsReadOnly(from.getTrxIsReadOnly());
		setTrxAutocommitNonLocking(from.getTrxAutocommitNonLocking());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IInnodbTrx> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached InnodbTrxRecord
	 */
	public InnodbTrxRecord() {
		super(InnodbTrx.INNODB_TRX);
	}

	/**
	 * Create a detached, initialised InnodbTrxRecord
	 */
	public InnodbTrxRecord(String trxId, String trxState, Timestamp trxStarted, String trxRequestedLockId, Timestamp trxWaitStarted, ULong trxWeight, ULong trxMysqlThreadId, String trxQuery, String trxOperationState, ULong trxTablesInUse, ULong trxTablesLocked, ULong trxLockStructs, ULong trxLockMemoryBytes, ULong trxRowsLocked, ULong trxRowsModified, ULong trxConcurrencyTickets, String trxIsolationLevel, Integer trxUniqueChecks, Integer trxForeignKeyChecks, String trxLastForeignKeyError, Integer trxAdaptiveHashLatched, ULong trxAdaptiveHashTimeout, Integer trxIsReadOnly, Integer trxAutocommitNonLocking) {
		super(InnodbTrx.INNODB_TRX);

		setValue(0, trxId);
		setValue(1, trxState);
		setValue(2, trxStarted);
		setValue(3, trxRequestedLockId);
		setValue(4, trxWaitStarted);
		setValue(5, trxWeight);
		setValue(6, trxMysqlThreadId);
		setValue(7, trxQuery);
		setValue(8, trxOperationState);
		setValue(9, trxTablesInUse);
		setValue(10, trxTablesLocked);
		setValue(11, trxLockStructs);
		setValue(12, trxLockMemoryBytes);
		setValue(13, trxRowsLocked);
		setValue(14, trxRowsModified);
		setValue(15, trxConcurrencyTickets);
		setValue(16, trxIsolationLevel);
		setValue(17, trxUniqueChecks);
		setValue(18, trxForeignKeyChecks);
		setValue(19, trxLastForeignKeyError);
		setValue(20, trxAdaptiveHashLatched);
		setValue(21, trxAdaptiveHashTimeout);
		setValue(22, trxIsReadOnly);
		setValue(23, trxAutocommitNonLocking);
	}
}

/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.information_schema.tables.records;


import com.intuit.datasource.jooq.information_schema.tables.Partitions;
import com.intuit.datasource.jooq.information_schema.tables.interfaces.IPartitions;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartitionsRecord extends TableRecordImpl<PartitionsRecord> implements IPartitions {

	private static final long serialVersionUID = 497131550;

	/**
	 * Setter for <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
	 */
	@Override
	public void setTableCatalog(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
	 */
	@Override
	public String getTableCatalog() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
	 */
	@Override
	public void setTableSchema(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
	 */
	@Override
	public String getTableSchema() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.TABLE_NAME</code>.
	 */
	@Override
	public void setTableName(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.TABLE_NAME</code>.
	 */
	@Override
	public String getTableName() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
	 */
	@Override
	public void setPartitionName(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
	 */
	@Override
	public String getPartitionName() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
	 */
	@Override
	public void setSubpartitionName(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
	 */
	@Override
	public String getSubpartitionName() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
	 */
	@Override
	public void setPartitionOrdinalPosition(ULong value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
	 */
	@Override
	public ULong getPartitionOrdinalPosition() {
		return (ULong) getValue(5);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
	 */
	@Override
	public void setSubpartitionOrdinalPosition(ULong value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
	 */
	@Override
	public ULong getSubpartitionOrdinalPosition() {
		return (ULong) getValue(6);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
	 */
	@Override
	public void setPartitionMethod(String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
	 */
	@Override
	public String getPartitionMethod() {
		return (String) getValue(7);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
	 */
	@Override
	public void setSubpartitionMethod(String value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
	 */
	@Override
	public String getSubpartitionMethod() {
		return (String) getValue(8);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
	 */
	@Override
	public void setPartitionExpression(String value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
	 */
	@Override
	public String getPartitionExpression() {
		return (String) getValue(9);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
	 */
	@Override
	public void setSubpartitionExpression(String value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
	 */
	@Override
	public String getSubpartitionExpression() {
		return (String) getValue(10);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
	 */
	@Override
	public void setPartitionDescription(String value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
	 */
	@Override
	public String getPartitionDescription() {
		return (String) getValue(11);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
	 */
	@Override
	public void setTableRows(ULong value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
	 */
	@Override
	public ULong getTableRows() {
		return (ULong) getValue(12);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
	 */
	@Override
	public void setAvgRowLength(ULong value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
	 */
	@Override
	public ULong getAvgRowLength() {
		return (ULong) getValue(13);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
	 */
	@Override
	public void setDataLength(ULong value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
	 */
	@Override
	public ULong getDataLength() {
		return (ULong) getValue(14);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
	 */
	@Override
	public void setMaxDataLength(ULong value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
	 */
	@Override
	public ULong getMaxDataLength() {
		return (ULong) getValue(15);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
	 */
	@Override
	public void setIndexLength(ULong value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
	 */
	@Override
	public ULong getIndexLength() {
		return (ULong) getValue(16);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.DATA_FREE</code>.
	 */
	@Override
	public void setDataFree(ULong value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.DATA_FREE</code>.
	 */
	@Override
	public ULong getDataFree() {
		return (ULong) getValue(17);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.CREATE_TIME</code>.
	 */
	@Override
	public void setCreateTime(Timestamp value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.CREATE_TIME</code>.
	 */
	@Override
	public Timestamp getCreateTime() {
		return (Timestamp) getValue(18);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
	 */
	@Override
	public void setUpdateTime(Timestamp value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
	 */
	@Override
	public Timestamp getUpdateTime() {
		return (Timestamp) getValue(19);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.CHECK_TIME</code>.
	 */
	@Override
	public void setCheckTime(Timestamp value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.CHECK_TIME</code>.
	 */
	@Override
	public Timestamp getCheckTime() {
		return (Timestamp) getValue(20);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.CHECKSUM</code>.
	 */
	@Override
	public void setChecksum(ULong value) {
		setValue(21, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.CHECKSUM</code>.
	 */
	@Override
	public ULong getChecksum() {
		return (ULong) getValue(21);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
	 */
	@Override
	public void setPartitionComment(String value) {
		setValue(22, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
	 */
	@Override
	public String getPartitionComment() {
		return (String) getValue(22);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.NODEGROUP</code>.
	 */
	@Override
	public void setNodegroup(String value) {
		setValue(23, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.NODEGROUP</code>.
	 */
	@Override
	public String getNodegroup() {
		return (String) getValue(23);
	}

	/**
	 * Setter for <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
	 */
	@Override
	public void setTablespaceName(String value) {
		setValue(24, value);
	}

	/**
	 * Getter for <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
	 */
	@Override
	public String getTablespaceName() {
		return (String) getValue(24);
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IPartitions from) {
		setTableCatalog(from.getTableCatalog());
		setTableSchema(from.getTableSchema());
		setTableName(from.getTableName());
		setPartitionName(from.getPartitionName());
		setSubpartitionName(from.getSubpartitionName());
		setPartitionOrdinalPosition(from.getPartitionOrdinalPosition());
		setSubpartitionOrdinalPosition(from.getSubpartitionOrdinalPosition());
		setPartitionMethod(from.getPartitionMethod());
		setSubpartitionMethod(from.getSubpartitionMethod());
		setPartitionExpression(from.getPartitionExpression());
		setSubpartitionExpression(from.getSubpartitionExpression());
		setPartitionDescription(from.getPartitionDescription());
		setTableRows(from.getTableRows());
		setAvgRowLength(from.getAvgRowLength());
		setDataLength(from.getDataLength());
		setMaxDataLength(from.getMaxDataLength());
		setIndexLength(from.getIndexLength());
		setDataFree(from.getDataFree());
		setCreateTime(from.getCreateTime());
		setUpdateTime(from.getUpdateTime());
		setCheckTime(from.getCheckTime());
		setChecksum(from.getChecksum());
		setPartitionComment(from.getPartitionComment());
		setNodegroup(from.getNodegroup());
		setTablespaceName(from.getTablespaceName());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IPartitions> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PartitionsRecord
	 */
	public PartitionsRecord() {
		super(Partitions.PARTITIONS);
	}

	/**
	 * Create a detached, initialised PartitionsRecord
	 */
	public PartitionsRecord(String tableCatalog, String tableSchema, String tableName, String partitionName, String subpartitionName, ULong partitionOrdinalPosition, ULong subpartitionOrdinalPosition, String partitionMethod, String subpartitionMethod, String partitionExpression, String subpartitionExpression, String partitionDescription, ULong tableRows, ULong avgRowLength, ULong dataLength, ULong maxDataLength, ULong indexLength, ULong dataFree, Timestamp createTime, Timestamp updateTime, Timestamp checkTime, ULong checksum, String partitionComment, String nodegroup, String tablespaceName) {
		super(Partitions.PARTITIONS);

		setValue(0, tableCatalog);
		setValue(1, tableSchema);
		setValue(2, tableName);
		setValue(3, partitionName);
		setValue(4, subpartitionName);
		setValue(5, partitionOrdinalPosition);
		setValue(6, subpartitionOrdinalPosition);
		setValue(7, partitionMethod);
		setValue(8, subpartitionMethod);
		setValue(9, partitionExpression);
		setValue(10, subpartitionExpression);
		setValue(11, partitionDescription);
		setValue(12, tableRows);
		setValue(13, avgRowLength);
		setValue(14, dataLength);
		setValue(15, maxDataLength);
		setValue(16, indexLength);
		setValue(17, dataFree);
		setValue(18, createTime);
		setValue(19, updateTime);
		setValue(20, checkTime);
		setValue(21, checksum);
		setValue(22, partitionComment);
		setValue(23, nodegroup);
		setValue(24, tablespaceName);
	}
}

/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.information_schema.tables.pojos;


import com.intuit.datasource.jooq.information_schema.tables.interfaces.IInnodbTrx;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTrx implements IInnodbTrx {

	private static final long serialVersionUID = -2026478028;

	private String    trxId;
	private String    trxState;
	private Timestamp trxStarted;
	private String    trxRequestedLockId;
	private Timestamp trxWaitStarted;
	private ULong     trxWeight;
	private ULong     trxMysqlThreadId;
	private String    trxQuery;
	private String    trxOperationState;
	private ULong     trxTablesInUse;
	private ULong     trxTablesLocked;
	private ULong     trxLockStructs;
	private ULong     trxLockMemoryBytes;
	private ULong     trxRowsLocked;
	private ULong     trxRowsModified;
	private ULong     trxConcurrencyTickets;
	private String    trxIsolationLevel;
	private Integer   trxUniqueChecks;
	private Integer   trxForeignKeyChecks;
	private String    trxLastForeignKeyError;
	private Integer   trxAdaptiveHashLatched;
	private ULong     trxAdaptiveHashTimeout;
	private Integer   trxIsReadOnly;
	private Integer   trxAutocommitNonLocking;

	public InnodbTrx() {}

	public InnodbTrx(InnodbTrx value) {
		this.trxId = value.trxId;
		this.trxState = value.trxState;
		this.trxStarted = value.trxStarted;
		this.trxRequestedLockId = value.trxRequestedLockId;
		this.trxWaitStarted = value.trxWaitStarted;
		this.trxWeight = value.trxWeight;
		this.trxMysqlThreadId = value.trxMysqlThreadId;
		this.trxQuery = value.trxQuery;
		this.trxOperationState = value.trxOperationState;
		this.trxTablesInUse = value.trxTablesInUse;
		this.trxTablesLocked = value.trxTablesLocked;
		this.trxLockStructs = value.trxLockStructs;
		this.trxLockMemoryBytes = value.trxLockMemoryBytes;
		this.trxRowsLocked = value.trxRowsLocked;
		this.trxRowsModified = value.trxRowsModified;
		this.trxConcurrencyTickets = value.trxConcurrencyTickets;
		this.trxIsolationLevel = value.trxIsolationLevel;
		this.trxUniqueChecks = value.trxUniqueChecks;
		this.trxForeignKeyChecks = value.trxForeignKeyChecks;
		this.trxLastForeignKeyError = value.trxLastForeignKeyError;
		this.trxAdaptiveHashLatched = value.trxAdaptiveHashLatched;
		this.trxAdaptiveHashTimeout = value.trxAdaptiveHashTimeout;
		this.trxIsReadOnly = value.trxIsReadOnly;
		this.trxAutocommitNonLocking = value.trxAutocommitNonLocking;
	}

	public InnodbTrx(
		String    trxId,
		String    trxState,
		Timestamp trxStarted,
		String    trxRequestedLockId,
		Timestamp trxWaitStarted,
		ULong     trxWeight,
		ULong     trxMysqlThreadId,
		String    trxQuery,
		String    trxOperationState,
		ULong     trxTablesInUse,
		ULong     trxTablesLocked,
		ULong     trxLockStructs,
		ULong     trxLockMemoryBytes,
		ULong     trxRowsLocked,
		ULong     trxRowsModified,
		ULong     trxConcurrencyTickets,
		String    trxIsolationLevel,
		Integer   trxUniqueChecks,
		Integer   trxForeignKeyChecks,
		String    trxLastForeignKeyError,
		Integer   trxAdaptiveHashLatched,
		ULong     trxAdaptiveHashTimeout,
		Integer   trxIsReadOnly,
		Integer   trxAutocommitNonLocking
	) {
		this.trxId = trxId;
		this.trxState = trxState;
		this.trxStarted = trxStarted;
		this.trxRequestedLockId = trxRequestedLockId;
		this.trxWaitStarted = trxWaitStarted;
		this.trxWeight = trxWeight;
		this.trxMysqlThreadId = trxMysqlThreadId;
		this.trxQuery = trxQuery;
		this.trxOperationState = trxOperationState;
		this.trxTablesInUse = trxTablesInUse;
		this.trxTablesLocked = trxTablesLocked;
		this.trxLockStructs = trxLockStructs;
		this.trxLockMemoryBytes = trxLockMemoryBytes;
		this.trxRowsLocked = trxRowsLocked;
		this.trxRowsModified = trxRowsModified;
		this.trxConcurrencyTickets = trxConcurrencyTickets;
		this.trxIsolationLevel = trxIsolationLevel;
		this.trxUniqueChecks = trxUniqueChecks;
		this.trxForeignKeyChecks = trxForeignKeyChecks;
		this.trxLastForeignKeyError = trxLastForeignKeyError;
		this.trxAdaptiveHashLatched = trxAdaptiveHashLatched;
		this.trxAdaptiveHashTimeout = trxAdaptiveHashTimeout;
		this.trxIsReadOnly = trxIsReadOnly;
		this.trxAutocommitNonLocking = trxAutocommitNonLocking;
	}

	@Override
	public String getTrxId() {
		return this.trxId;
	}

	@Override
	public void setTrxId(String trxId) {
		this.trxId = trxId;
	}

	@Override
	public String getTrxState() {
		return this.trxState;
	}

	@Override
	public void setTrxState(String trxState) {
		this.trxState = trxState;
	}

	@Override
	public Timestamp getTrxStarted() {
		return this.trxStarted;
	}

	@Override
	public void setTrxStarted(Timestamp trxStarted) {
		this.trxStarted = trxStarted;
	}

	@Override
	public String getTrxRequestedLockId() {
		return this.trxRequestedLockId;
	}

	@Override
	public void setTrxRequestedLockId(String trxRequestedLockId) {
		this.trxRequestedLockId = trxRequestedLockId;
	}

	@Override
	public Timestamp getTrxWaitStarted() {
		return this.trxWaitStarted;
	}

	@Override
	public void setTrxWaitStarted(Timestamp trxWaitStarted) {
		this.trxWaitStarted = trxWaitStarted;
	}

	@Override
	public ULong getTrxWeight() {
		return this.trxWeight;
	}

	@Override
	public void setTrxWeight(ULong trxWeight) {
		this.trxWeight = trxWeight;
	}

	@Override
	public ULong getTrxMysqlThreadId() {
		return this.trxMysqlThreadId;
	}

	@Override
	public void setTrxMysqlThreadId(ULong trxMysqlThreadId) {
		this.trxMysqlThreadId = trxMysqlThreadId;
	}

	@Override
	public String getTrxQuery() {
		return this.trxQuery;
	}

	@Override
	public void setTrxQuery(String trxQuery) {
		this.trxQuery = trxQuery;
	}

	@Override
	public String getTrxOperationState() {
		return this.trxOperationState;
	}

	@Override
	public void setTrxOperationState(String trxOperationState) {
		this.trxOperationState = trxOperationState;
	}

	@Override
	public ULong getTrxTablesInUse() {
		return this.trxTablesInUse;
	}

	@Override
	public void setTrxTablesInUse(ULong trxTablesInUse) {
		this.trxTablesInUse = trxTablesInUse;
	}

	@Override
	public ULong getTrxTablesLocked() {
		return this.trxTablesLocked;
	}

	@Override
	public void setTrxTablesLocked(ULong trxTablesLocked) {
		this.trxTablesLocked = trxTablesLocked;
	}

	@Override
	public ULong getTrxLockStructs() {
		return this.trxLockStructs;
	}

	@Override
	public void setTrxLockStructs(ULong trxLockStructs) {
		this.trxLockStructs = trxLockStructs;
	}

	@Override
	public ULong getTrxLockMemoryBytes() {
		return this.trxLockMemoryBytes;
	}

	@Override
	public void setTrxLockMemoryBytes(ULong trxLockMemoryBytes) {
		this.trxLockMemoryBytes = trxLockMemoryBytes;
	}

	@Override
	public ULong getTrxRowsLocked() {
		return this.trxRowsLocked;
	}

	@Override
	public void setTrxRowsLocked(ULong trxRowsLocked) {
		this.trxRowsLocked = trxRowsLocked;
	}

	@Override
	public ULong getTrxRowsModified() {
		return this.trxRowsModified;
	}

	@Override
	public void setTrxRowsModified(ULong trxRowsModified) {
		this.trxRowsModified = trxRowsModified;
	}

	@Override
	public ULong getTrxConcurrencyTickets() {
		return this.trxConcurrencyTickets;
	}

	@Override
	public void setTrxConcurrencyTickets(ULong trxConcurrencyTickets) {
		this.trxConcurrencyTickets = trxConcurrencyTickets;
	}

	@Override
	public String getTrxIsolationLevel() {
		return this.trxIsolationLevel;
	}

	@Override
	public void setTrxIsolationLevel(String trxIsolationLevel) {
		this.trxIsolationLevel = trxIsolationLevel;
	}

	@Override
	public Integer getTrxUniqueChecks() {
		return this.trxUniqueChecks;
	}

	@Override
	public void setTrxUniqueChecks(Integer trxUniqueChecks) {
		this.trxUniqueChecks = trxUniqueChecks;
	}

	@Override
	public Integer getTrxForeignKeyChecks() {
		return this.trxForeignKeyChecks;
	}

	@Override
	public void setTrxForeignKeyChecks(Integer trxForeignKeyChecks) {
		this.trxForeignKeyChecks = trxForeignKeyChecks;
	}

	@Override
	public String getTrxLastForeignKeyError() {
		return this.trxLastForeignKeyError;
	}

	@Override
	public void setTrxLastForeignKeyError(String trxLastForeignKeyError) {
		this.trxLastForeignKeyError = trxLastForeignKeyError;
	}

	@Override
	public Integer getTrxAdaptiveHashLatched() {
		return this.trxAdaptiveHashLatched;
	}

	@Override
	public void setTrxAdaptiveHashLatched(Integer trxAdaptiveHashLatched) {
		this.trxAdaptiveHashLatched = trxAdaptiveHashLatched;
	}

	@Override
	public ULong getTrxAdaptiveHashTimeout() {
		return this.trxAdaptiveHashTimeout;
	}

	@Override
	public void setTrxAdaptiveHashTimeout(ULong trxAdaptiveHashTimeout) {
		this.trxAdaptiveHashTimeout = trxAdaptiveHashTimeout;
	}

	@Override
	public Integer getTrxIsReadOnly() {
		return this.trxIsReadOnly;
	}

	@Override
	public void setTrxIsReadOnly(Integer trxIsReadOnly) {
		this.trxIsReadOnly = trxIsReadOnly;
	}

	@Override
	public Integer getTrxAutocommitNonLocking() {
		return this.trxAutocommitNonLocking;
	}

	@Override
	public void setTrxAutocommitNonLocking(Integer trxAutocommitNonLocking) {
		this.trxAutocommitNonLocking = trxAutocommitNonLocking;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("InnodbTrx (");

		sb.append(trxId);
		sb.append(", ").append(trxState);
		sb.append(", ").append(trxStarted);
		sb.append(", ").append(trxRequestedLockId);
		sb.append(", ").append(trxWaitStarted);
		sb.append(", ").append(trxWeight);
		sb.append(", ").append(trxMysqlThreadId);
		sb.append(", ").append(trxQuery);
		sb.append(", ").append(trxOperationState);
		sb.append(", ").append(trxTablesInUse);
		sb.append(", ").append(trxTablesLocked);
		sb.append(", ").append(trxLockStructs);
		sb.append(", ").append(trxLockMemoryBytes);
		sb.append(", ").append(trxRowsLocked);
		sb.append(", ").append(trxRowsModified);
		sb.append(", ").append(trxConcurrencyTickets);
		sb.append(", ").append(trxIsolationLevel);
		sb.append(", ").append(trxUniqueChecks);
		sb.append(", ").append(trxForeignKeyChecks);
		sb.append(", ").append(trxLastForeignKeyError);
		sb.append(", ").append(trxAdaptiveHashLatched);
		sb.append(", ").append(trxAdaptiveHashTimeout);
		sb.append(", ").append(trxIsReadOnly);
		sb.append(", ").append(trxAutocommitNonLocking);

		sb.append(")");
		return sb.toString();
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IInnodbTrx from) {
		setTrxId(from.getTrxId());
		setTrxState(from.getTrxState());
		setTrxStarted(from.getTrxStarted());
		setTrxRequestedLockId(from.getTrxRequestedLockId());
		setTrxWaitStarted(from.getTrxWaitStarted());
		setTrxWeight(from.getTrxWeight());
		setTrxMysqlThreadId(from.getTrxMysqlThreadId());
		setTrxQuery(from.getTrxQuery());
		setTrxOperationState(from.getTrxOperationState());
		setTrxTablesInUse(from.getTrxTablesInUse());
		setTrxTablesLocked(from.getTrxTablesLocked());
		setTrxLockStructs(from.getTrxLockStructs());
		setTrxLockMemoryBytes(from.getTrxLockMemoryBytes());
		setTrxRowsLocked(from.getTrxRowsLocked());
		setTrxRowsModified(from.getTrxRowsModified());
		setTrxConcurrencyTickets(from.getTrxConcurrencyTickets());
		setTrxIsolationLevel(from.getTrxIsolationLevel());
		setTrxUniqueChecks(from.getTrxUniqueChecks());
		setTrxForeignKeyChecks(from.getTrxForeignKeyChecks());
		setTrxLastForeignKeyError(from.getTrxLastForeignKeyError());
		setTrxAdaptiveHashLatched(from.getTrxAdaptiveHashLatched());
		setTrxAdaptiveHashTimeout(from.getTrxAdaptiveHashTimeout());
		setTrxIsReadOnly(from.getTrxIsReadOnly());
		setTrxAutocommitNonLocking(from.getTrxAutocommitNonLocking());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IInnodbTrx> E into(E into) {
		into.from(this);
		return into;
	}
}

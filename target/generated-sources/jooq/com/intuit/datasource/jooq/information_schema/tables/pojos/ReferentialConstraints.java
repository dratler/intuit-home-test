/**
 * This class is generated by jOOQ
 */
package com.intuit.datasource.jooq.information_schema.tables.pojos;


import com.intuit.datasource.jooq.information_schema.tables.interfaces.IReferentialConstraints;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReferentialConstraints implements IReferentialConstraints {

	private static final long serialVersionUID = -510433521;

	private String constraintCatalog;
	private String constraintSchema;
	private String constraintName;
	private String uniqueConstraintCatalog;
	private String uniqueConstraintSchema;
	private String uniqueConstraintName;
	private String matchOption;
	private String updateRule;
	private String deleteRule;
	private String tableName;
	private String referencedTableName;

	public ReferentialConstraints() {}

	public ReferentialConstraints(ReferentialConstraints value) {
		this.constraintCatalog = value.constraintCatalog;
		this.constraintSchema = value.constraintSchema;
		this.constraintName = value.constraintName;
		this.uniqueConstraintCatalog = value.uniqueConstraintCatalog;
		this.uniqueConstraintSchema = value.uniqueConstraintSchema;
		this.uniqueConstraintName = value.uniqueConstraintName;
		this.matchOption = value.matchOption;
		this.updateRule = value.updateRule;
		this.deleteRule = value.deleteRule;
		this.tableName = value.tableName;
		this.referencedTableName = value.referencedTableName;
	}

	public ReferentialConstraints(
		String constraintCatalog,
		String constraintSchema,
		String constraintName,
		String uniqueConstraintCatalog,
		String uniqueConstraintSchema,
		String uniqueConstraintName,
		String matchOption,
		String updateRule,
		String deleteRule,
		String tableName,
		String referencedTableName
	) {
		this.constraintCatalog = constraintCatalog;
		this.constraintSchema = constraintSchema;
		this.constraintName = constraintName;
		this.uniqueConstraintCatalog = uniqueConstraintCatalog;
		this.uniqueConstraintSchema = uniqueConstraintSchema;
		this.uniqueConstraintName = uniqueConstraintName;
		this.matchOption = matchOption;
		this.updateRule = updateRule;
		this.deleteRule = deleteRule;
		this.tableName = tableName;
		this.referencedTableName = referencedTableName;
	}

	@Override
	public String getConstraintCatalog() {
		return this.constraintCatalog;
	}

	@Override
	public void setConstraintCatalog(String constraintCatalog) {
		this.constraintCatalog = constraintCatalog;
	}

	@Override
	public String getConstraintSchema() {
		return this.constraintSchema;
	}

	@Override
	public void setConstraintSchema(String constraintSchema) {
		this.constraintSchema = constraintSchema;
	}

	@Override
	public String getConstraintName() {
		return this.constraintName;
	}

	@Override
	public void setConstraintName(String constraintName) {
		this.constraintName = constraintName;
	}

	@Override
	public String getUniqueConstraintCatalog() {
		return this.uniqueConstraintCatalog;
	}

	@Override
	public void setUniqueConstraintCatalog(String uniqueConstraintCatalog) {
		this.uniqueConstraintCatalog = uniqueConstraintCatalog;
	}

	@Override
	public String getUniqueConstraintSchema() {
		return this.uniqueConstraintSchema;
	}

	@Override
	public void setUniqueConstraintSchema(String uniqueConstraintSchema) {
		this.uniqueConstraintSchema = uniqueConstraintSchema;
	}

	@Override
	public String getUniqueConstraintName() {
		return this.uniqueConstraintName;
	}

	@Override
	public void setUniqueConstraintName(String uniqueConstraintName) {
		this.uniqueConstraintName = uniqueConstraintName;
	}

	@Override
	public String getMatchOption() {
		return this.matchOption;
	}

	@Override
	public void setMatchOption(String matchOption) {
		this.matchOption = matchOption;
	}

	@Override
	public String getUpdateRule() {
		return this.updateRule;
	}

	@Override
	public void setUpdateRule(String updateRule) {
		this.updateRule = updateRule;
	}

	@Override
	public String getDeleteRule() {
		return this.deleteRule;
	}

	@Override
	public void setDeleteRule(String deleteRule) {
		this.deleteRule = deleteRule;
	}

	@Override
	public String getTableName() {
		return this.tableName;
	}

	@Override
	public void setTableName(String tableName) {
		this.tableName = tableName;
	}

	@Override
	public String getReferencedTableName() {
		return this.referencedTableName;
	}

	@Override
	public void setReferencedTableName(String referencedTableName) {
		this.referencedTableName = referencedTableName;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ReferentialConstraints (");

		sb.append(constraintCatalog);
		sb.append(", ").append(constraintSchema);
		sb.append(", ").append(constraintName);
		sb.append(", ").append(uniqueConstraintCatalog);
		sb.append(", ").append(uniqueConstraintSchema);
		sb.append(", ").append(uniqueConstraintName);
		sb.append(", ").append(matchOption);
		sb.append(", ").append(updateRule);
		sb.append(", ").append(deleteRule);
		sb.append(", ").append(tableName);
		sb.append(", ").append(referencedTableName);

		sb.append(")");
		return sb.toString();
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IReferentialConstraints from) {
		setConstraintCatalog(from.getConstraintCatalog());
		setConstraintSchema(from.getConstraintSchema());
		setConstraintName(from.getConstraintName());
		setUniqueConstraintCatalog(from.getUniqueConstraintCatalog());
		setUniqueConstraintSchema(from.getUniqueConstraintSchema());
		setUniqueConstraintName(from.getUniqueConstraintName());
		setMatchOption(from.getMatchOption());
		setUpdateRule(from.getUpdateRule());
		setDeleteRule(from.getDeleteRule());
		setTableName(from.getTableName());
		setReferencedTableName(from.getReferencedTableName());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IReferentialConstraints> E into(E into) {
		into.from(this);
		return into;
	}
}
